// Generated by Peggy 3.0.1.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() {
    this.constructor = child;
  }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = 'SyntaxError';
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || ' ';
  if (str.length > targetLength) {
    return str;
  }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function (sources) {
  var str = 'Error: ' + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s =
      this.location.source && typeof this.location.source.offset === 'function' ? this.location.source.offset(s) : s;
    var loc = this.location.source + ':' + offset_s.line + ':' + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd('', offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = last - s.column || 1;
      str +=
        '\n --> ' +
        loc +
        '\n' +
        filler +
        ' |\n' +
        offset_s.line +
        ' | ' +
        line +
        '\n' +
        filler +
        ' | ' +
        peg$padEnd('', s.column - 1, ' ') +
        peg$padEnd('', hatLen, '^');
    } else {
      str += '\n at ' + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function (expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function (expectation) {
      return '"' + literalEscape(expectation.text) + '"';
    },

    class: function (expectation) {
      var escapedParts = expectation.parts.map(function (part) {
        return Array.isArray(part) ? classEscape(part[0]) + '-' + classEscape(part[1]) : classEscape(part);
      });

      return '[' + (expectation.inverted ? '^' : '') + escapedParts.join('') + ']';
    },

    any: function () {
      return 'any character';
    },

    end: function () {
      return 'end of input';
    },

    other: function (expectation) {
      return expectation.description;
    },
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/"/g, '\\"')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, '\\\\')
      .replace(/\]/g, '\\]')
      .replace(/\^/g, '\\^')
      .replace(/-/g, '\\-')
      .replace(/\0/g, '\\0')
      .replace(/\t/g, '\\t')
      .replace(/\n/g, '\\n')
      .replace(/\r/g, '\\r')
      .replace(/[\x00-\x0F]/g, function (ch) {
        return '\\x0' + hex(ch);
      })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
        return '\\x' + hex(ch);
      });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + ' or ' + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(', ') + ', or ' + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? '"' + literalEscape(found) + '"' : 'end of input';
  }

  return 'Expected ' + describeExpected(expected) + ' but ' + describeFound(found) + ' found.';
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { PGT: peg$parsePGT };
  var peg$startRuleFunction = peg$parsePGT;

  var peg$c0 = '"';
  var peg$c1 = ' ';
  var peg$c2 = '\n';
  var peg$c3 = '+';
  var peg$c4 = '#';
  var peg$c5 = 'x';
  var peg$c6 = '=';
  var peg$c7 = '$';
  var peg$c8 = '[';
  var peg$c9 = ']';
  var peg$c10 = '{[%';
  var peg$c11 = ';';
  var peg$c12 = ']}';
  var peg$c13 = '{';
  var peg$c14 = '}';
  var peg$c15 = 'O-O-O';
  var peg$c16 = 'O-O';
  var peg$c17 = '!';

  var peg$r0 = /^[A-Za-z]/;
  var peg$r1 = /^[^"]/;
  var peg$r2 = /^[1-9]/;
  var peg$r3 = /^[0-9]/;
  var peg$r4 = /^[NKQRB]/;
  var peg$r5 = /^[a-h\-]/;
  var peg$r6 = /^[1-8\-]/;
  var peg$r7 = /^[QRBN]/;
  var peg$r8 = /^[A-Za-z0-9_\-]/;
  var peg$r9 = /^[A-Za-z0-9._\-]/;
  var peg$r10 = /^[^}]/;

  var peg$e0 = peg$anyExpectation();
  var peg$e1 = peg$classExpectation(
    [
      ['A', 'Z'],
      ['a', 'z'],
    ],
    false,
    false
  );
  var peg$e2 = peg$literalExpectation('"', false);
  var peg$e3 = peg$classExpectation(['"'], true, false);
  var peg$e4 = peg$classExpectation([['1', '9']], false, false);
  var peg$e5 = peg$classExpectation([['0', '9']], false, false);
  var peg$e6 = peg$literalExpectation(' ', false);
  var peg$e7 = peg$literalExpectation('\n', false);
  var peg$e8 = peg$classExpectation(['N', 'K', 'Q', 'R', 'B'], false, false);
  var peg$e9 = peg$classExpectation([['a', 'h'], '-'], false, false);
  var peg$e10 = peg$classExpectation([['1', '8'], '-'], false, false);
  var peg$e11 = peg$literalExpectation('+', false);
  var peg$e12 = peg$literalExpectation('#', false);
  var peg$e13 = peg$literalExpectation('x', false);
  var peg$e14 = peg$literalExpectation('=', false);
  var peg$e15 = peg$classExpectation(['Q', 'R', 'B', 'N'], false, false);
  var peg$e16 = peg$literalExpectation('$', false);
  var peg$e17 = peg$literalExpectation('[', false);
  var peg$e18 = peg$literalExpectation(']', false);
  var peg$e19 = peg$classExpectation([['A', 'Z'], ['a', 'z'], ['0', '9'], '_', '-'], false, false);
  var peg$e20 = peg$classExpectation([['A', 'Z'], ['a', 'z'], ['0', '9'], '.', '_', '-'], false, false);
  var peg$e21 = peg$literalExpectation('{[%', false);
  var peg$e22 = peg$literalExpectation(';', false);
  var peg$e23 = peg$literalExpectation(']}', false);
  var peg$e24 = peg$classExpectation(['}'], true, false);
  var peg$e25 = peg$literalExpectation('{', false);
  var peg$e26 = peg$literalExpectation('}', false);
  var peg$e27 = peg$literalExpectation('O-O-O', false);
  var peg$e28 = peg$literalExpectation('O-O', false);
  var peg$e29 = peg$literalExpectation('!', false);

  var peg$f0 = function (headers, steps) {
    return { headers, steps };
  };
  var peg$f1 = function (str) {
    return str.join('');
  };
  var peg$f2 = function (a, b) {
    return parseInt(a + b.join(''), 10);
  };
  var peg$f3 = function (rank, file) {
    return rank + file;
  };
  var peg$f4 = function (chars) {
    return chars.join('');
  };
  var peg$f5 = function (key, value) {
    return toHeader(key, value);
  };
  var peg$f6 = function (text) {
    return text.join('');
  };
  var peg$f7 = function (text) {
    return text.join('');
  };
  var peg$f8 = function (name, args) {
    return toCommand(name, args);
  };
  var peg$f9 = function (content, commands) {
    return toComment(content, commands);
  };
  var peg$f10 = function (move) {
    return flatten(move).join('');
  };
  var peg$f11 = function (autoplay, halfMove, n) {
    return n;
  };
  var peg$f12 = function (autoplay, halfMove, nags, contents) {
    return toMove(autoplay, halfMove, nags, contents);
  };
  var peg$f13 = function (data) {
    return data;
  };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ('startRule' in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error('Can\'t start parsing from rule "' + options.startRule + '".');
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos,
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined ? location : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: 'literal', text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: 'class', parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: 'any' };
  }

  function peg$endExpectation() {
    return { type: 'end' };
  }

  function peg$otherExpectation(description) {
    return { type: 'other', description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column,
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column,
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column,
      },
    };
    if (offset && peg$source && typeof peg$source.offset === 'function') {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) {
      return;
    }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);
  }

  function peg$parsePGT() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseMultiHeader();
    s2 = [];
    s3 = peg$parseStep();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseStep();
    }
    peg$savedPos = s0;
    s0 = peg$f0(s1, s2);

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e0);
      }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSymbol() {
    var s0;

    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e1);
      }
    }

    return s0;
  }

  function peg$parseString() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c0;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e2);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r1.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e3);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e3);
          }
        }
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e2);
        }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseInteger() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e4);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e5);
        }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e5);
          }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSpace() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c1;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e6);
      }
    }

    return s0;
  }

  function peg$parseMultiSpace() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseSpace();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseSpace();
    }

    return s0;
  }

  function peg$parseOptionalSpace() {
    var s0;

    s0 = peg$parseMultiSpace();

    return s0;
  }

  function peg$parseNewline() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e7);
      }
    }

    return s0;
  }

  function peg$parseMultiNewline() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseNewline();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseNewline();
    }

    return s0;
  }

  function peg$parseOptionalNewline() {
    var s0;

    s0 = peg$parseMultiNewline();

    return s0;
  }

  function peg$parsePiece() {
    var s0;

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e8);
      }
    }

    return s0;
  }

  function peg$parseRank() {
    var s0;

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e9);
      }
    }

    return s0;
  }

  function peg$parseFile() {
    var s0;

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e10);
      }
    }

    return s0;
  }

  function peg$parseCheck() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e11);
      }
    }

    return s0;
  }

  function peg$parseMate() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e12);
      }
    }

    return s0;
  }

  function peg$parseCapture() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 120) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e13);
      }
    }

    return s0;
  }

  function peg$parsePromotion() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e14);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (peg$r7.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e15);
      }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSquare() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRank();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFile();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f3(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNag() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s2 = peg$c7;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e16);
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseInteger();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseDisambiguation() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRank();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFile();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseRank();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFile();
      }
    }

    return s0;
  }

  function peg$parseHeader() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e17);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseOptionalSpace();
      s3 = [];
      s4 = peg$parseSymbol();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseSymbol();
      }
      s4 = peg$parseOptionalSpace();
      s5 = peg$parseString();
      if (s5 !== peg$FAILED) {
        s6 = peg$parseOptionalSpace();
        if (input.charCodeAt(peg$currPos) === 93) {
          s7 = peg$c9;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e18);
          }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseOptionalSpace();
          s9 = peg$parseOptionalNewline();
          peg$savedPos = s0;
          s0 = peg$f5(s3, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiHeader() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseHeader();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseHeader();
    }

    return s0;
  }

  function peg$parseCommandName() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e19);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r8.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e19);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommandArgSymbol() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e20);
      }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e20);
          }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCommand() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e21);
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCommandName();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOptionalSpace();
        s4 = [];
        s5 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s6 = peg$c11;
          peg$currPos++;
        } else {
          s6 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e22);
          }
        }
        if (s6 === peg$FAILED) {
          s6 = null;
        }
        s7 = peg$parseCommandArgSymbol();
        if (s7 !== peg$FAILED) {
          s6 = [s6, s7];
          s5 = s6;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s6 = peg$c11;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) {
              peg$fail(peg$e22);
            }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseCommandArgSymbol();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        }
        if (input.substr(peg$currPos, 2) === peg$c12) {
          s5 = peg$c12;
          peg$currPos += 2;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) {
            peg$fail(peg$e23);
          }
        }
        if (s5 !== peg$FAILED) {
          s6 = peg$parseOptionalSpace();
          peg$savedPos = s0;
          s0 = peg$f8(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiCommand() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseCommand();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseCommand();
    }

    return s0;
  }

  function peg$parseCommentContent() {
    var s0;

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e24);
      }
    }

    return s0;
  }

  function peg$parseComment() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parseOptionalSpace();
    if (input.charCodeAt(peg$currPos) === 123) {
      s2 = peg$c13;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e25);
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = [];
      s4 = peg$parseCommentContent();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseCommentContent();
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        s4 = peg$c14;
        peg$currPos++;
      } else {
        s4 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e26);
        }
      }
      if (s4 !== peg$FAILED) {
        s5 = peg$parseOptionalSpace();
        s6 = peg$parseMultiCommand();
        peg$savedPos = s0;
        s0 = peg$f9(s3, s6);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePawnHalfMove() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseRank();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCapture();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseSquare();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsePromotion();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePieceHalfMove() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePiece();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCapture();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseSquare();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePieceDisambiguationHalfMove() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePiece();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDisambiguation();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCapture();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseSquare();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCastleHalfMove() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c15) {
      s0 = peg$c15;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e27);
      }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c16) {
        s0 = peg$c16;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) {
          peg$fail(peg$e28);
        }
      }
    }

    return s0;
  }

  function peg$parseHalfMove() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsePawnHalfMove();
    if (s2 === peg$FAILED) {
      s2 = peg$parsePieceHalfMove();
      if (s2 === peg$FAILED) {
        s2 = peg$parsePieceDisambiguationHalfMove();
        if (s2 === peg$FAILED) {
          s2 = peg$parseCastleHalfMove();
        }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCheck();
      if (s3 === peg$FAILED) {
        s3 = peg$parseMate();
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseNag();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s2 = [s2, s3, s4];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f10(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMove() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 33) {
      s1 = peg$c17;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) {
        peg$fail(peg$e29);
      }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseOptionalSpace();
    s3 = peg$parseHalfMove();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parseOptionalSpace();
      s7 = peg$parseNag();
      if (s7 !== peg$FAILED) {
        peg$savedPos = s5;
        s5 = peg$f11(s1, s3, s7);
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = peg$parseOptionalSpace();
        s7 = peg$parseNag();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f11(s1, s3, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = peg$parseOptionalSpace();
      s6 = peg$currPos;
      s7 = peg$parseMultiCommand();
      s8 = peg$parseComment();
      if (s8 === peg$FAILED) {
        s8 = null;
      }
      s7 = [s7, s8];
      s6 = s7;
      peg$savedPos = s0;
      s0 = peg$f12(s1, s3, s4, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseStep() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseCommand();
    if (s1 === peg$FAILED) {
      s1 = peg$parseComment();
      if (s1 === peg$FAILED) {
        s1 = peg$parseMove();
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseNewline();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseNewline();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseEOF();
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f13(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMultiStep() {
    var s0, s1;

    s0 = [];
    s1 = peg$parseStep();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$parseStep();
    }

    return s0;
  }

  function flatten(array, accumulator = []) {
    for (let i = 0; i < array.length; i++) {
      if (Array.isArray(array[i])) {
        flatten(array[i], accumulator);
      } else {
        accumulator.push(array[i]);
      }
    }

    return accumulator;
  }

  function toHeader(key, value) {
    return {
      key: key.join(''),
      value,
    };
  }

  function toComment(content, commands) {
    if (commands.length > 0) {
      return {
        type: 'COMMENT',
        value: {
          text: content.join(''),
          commands: commands.map((command) => ({ name: command.value.name, args: command.value.args })),
        },
      };
    } else {
      return {
        type: 'COMMENT',
        value: {
          text: content.join(''),
          commands: [],
        },
      };
    }
  }

  function toCommand(name, args) {
    const filteredArgs = args
      .map((arg) => {
        if (arg[0] === ';' || arg[0] === null) {
          return arg.slice(1);
        } else {
          return arg;
        }
      })
      .flat();

    return {
      type: 'COMMAND',
      value: {
        name,
        args: filteredArgs,
      },
    };
  }

  function toMove(autoplay, halfMove, nags, contents) {
    const flatContents = contents.flat().filter((content) => content);
    let commands = [];
    let comments = [];
    if (flatContents[0] !== null) {
      commands = flatContents.filter((content) => content.type === 'COMMAND');
      comments = flatContents.filter((content) => content.type === 'COMMENT');
    }

    return {
      type: 'MOVE',
      value: {
        autoplay: autoplay === null ? true : false,
        moveSan: halfMove,
        nags,
        comments: [...comments, ...commands],
      },
    };
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export { peg$SyntaxError as SyntaxError, peg$parse as parse };
