// Generated by Peggy 3.0.1.
//
// https://peggyjs.org/

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "\"";
  var peg$c1 = " ";
  var peg$c2 = "\t";
  var peg$c3 = "\f";
  var peg$c4 = "\n";
  var peg$c5 = "\r";
  var peg$c6 = "[";
  var peg$c7 = "]";
  var peg$c8 = "+";
  var peg$c9 = "#";
  var peg$c10 = "x";
  var peg$c11 = ".";
  var peg$c12 = "1-0";
  var peg$c13 = "0-1";
  var peg$c14 = "*";
  var peg$c15 = "1/2-1/2";
  var peg$c16 = "=";
  var peg$c17 = "$";
  var peg$c18 = "{";
  var peg$c19 = "}";
  var peg$c20 = ";";
  var peg$c21 = "[%";
  var peg$c22 = "(";
  var peg$c23 = ")";
  var peg$c24 = "O-O-O";
  var peg$c25 = "O-O";

  var peg$r0 = /^[^"]/;
  var peg$r1 = /^[1-9]/;
  var peg$r2 = /^[0-9]/;
  var peg$r3 = /^[A-Za-z0-9_\-]/;
  var peg$r4 = /^[A-Za-z0-9._\-]/;
  var peg$r5 = /^[NKQRB]/;
  var peg$r6 = /^[a-h\-]/;
  var peg$r7 = /^[1-8\-]/;
  var peg$r8 = /^[QRBN]/;
  var peg$r9 = /^[^}]/;
  var peg$r10 = /^[^\n]/;

  var peg$e0 = peg$anyExpectation();
  var peg$e1 = peg$literalExpectation("\"", false);
  var peg$e2 = peg$classExpectation(["\""], true, false);
  var peg$e3 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e4 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e5 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], "_", "-"], false, false);
  var peg$e6 = peg$classExpectation([["A", "Z"], ["a", "z"], ["0", "9"], ".", "_", "-"], false, false);
  var peg$e7 = peg$literalExpectation(" ", false);
  var peg$e8 = peg$literalExpectation("\t", false);
  var peg$e9 = peg$literalExpectation("\f", false);
  var peg$e10 = peg$literalExpectation("\n", false);
  var peg$e11 = peg$literalExpectation("\r", false);
  var peg$e12 = peg$literalExpectation("[", false);
  var peg$e13 = peg$literalExpectation("]", false);
  var peg$e14 = peg$classExpectation(["N", "K", "Q", "R", "B"], false, false);
  var peg$e15 = peg$classExpectation([["a", "h"], "-"], false, false);
  var peg$e16 = peg$classExpectation([["1", "8"], "-"], false, false);
  var peg$e17 = peg$literalExpectation("+", false);
  var peg$e18 = peg$literalExpectation("#", false);
  var peg$e19 = peg$literalExpectation("x", false);
  var peg$e20 = peg$literalExpectation(".", false);
  var peg$e21 = peg$literalExpectation("1-0", false);
  var peg$e22 = peg$literalExpectation("0-1", false);
  var peg$e23 = peg$literalExpectation("*", false);
  var peg$e24 = peg$literalExpectation("1/2-1/2", false);
  var peg$e25 = peg$literalExpectation("=", false);
  var peg$e26 = peg$classExpectation(["Q", "R", "B", "N"], false, false);
  var peg$e27 = peg$literalExpectation("$", false);
  var peg$e28 = peg$classExpectation(["}"], true, false);
  var peg$e29 = peg$literalExpectation("{", false);
  var peg$e30 = peg$literalExpectation("}", false);
  var peg$e31 = peg$classExpectation(["\n"], true, false);
  var peg$e32 = peg$literalExpectation(";", false);
  var peg$e33 = peg$literalExpectation("[%", false);
  var peg$e34 = peg$literalExpectation("(", false);
  var peg$e35 = peg$literalExpectation(")", false);
  var peg$e36 = peg$literalExpectation("O-O-O", false);
  var peg$e37 = peg$literalExpectation("O-O", false);

  var peg$f0 = function(games) { return games.map(function(game) { return game[0] }) };
  var peg$f1 = function(text) { return text.join('') };
  var peg$f2 = function(a, b) { return parseInt(a + b.join(''), 10) };
  var peg$f3 = function(chars) {return chars.join('')};
  var peg$f4 = function(chars) { return chars.join('') };
  var peg$f5 = function(name, value) { return { name, value } };
  var peg$f6 = function(headers) { return headers };
  var peg$f7 = function(number) { return number };
  var peg$f8 = function(rank, file) { return rank + file };
  var peg$f9 = function(chars) { return chars.join('') };
  var peg$f10 = function(text) { return { text: text.join('')} };
  var peg$f11 = function(text) { return { text: text.join('')} };
  var peg$f12 = function(name, args) { return { name, args: toCommandArguments(args) } };
  var peg$f13 = function(commands) { return { command: commands } };
  var peg$f14 = function(command, comment) { return { text: comment.join(''), command: command.command } };
  var peg$f15 = function(comment) { return { text: comment.text, commands: comment.command ?? null } };
  var peg$f16 = function(comment) { return comment };
  var peg$f17 = function(comment, moves, result) { return { comments: flatten(comment), moves, result } };
  var peg$f18 = function(move) { return flatten(move).join('') };
  var peg$f19 = function(move_number, half_move, n) { return n };
  var peg$f20 = function(move_number, half_move, nags, c) { return c };
  var peg$f21 = function(move_number, half_move, nags, comments, r) { return r };
  var peg$f22 = function(move_number, half_move, nags, comments, ravs) { return toMove({ move_number, half_move, nags, ravs, comments }) };
  var peg$f23 = function(first, rest) { return first ? [first].concat(rest.map(function(m) { return m[1] })) : [] };
  var peg$f24 = function(intro_comments, headers, comments, move, result) { return [move, result] };
  var peg$f25 = function(intro_comments, headers, comments, result) { return [null, result] };
  var peg$f26 = function(intro_comments, headers, comments, moves) { return toGame({ intro_comments, headers, comments, moves: moves[0], result: moves[1] }) };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$currPos;
    s3 = peg$parseGAME();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$parseLINE_FEED();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseLINE_FEED();
      }
      s3 = [s3, s4];
      s2 = s3;
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      s3 = peg$parseGAME();
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseLINE_FEED();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseLINE_FEED();
        }
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    }
    s2 = peg$parseEOF();
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f0(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseEOF() {
    var s0, s1;

    s0 = peg$currPos;
    peg$silentFails++;
    if (input.length > peg$currPos) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    peg$silentFails--;
    if (s1 === peg$FAILED) {
      s0 = undefined;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDOUBLE_QUOTE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 34) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDOUBLE_QUOTE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r0.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e2); }
        }
      }
      s3 = peg$parseDOUBLE_QUOTE();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f1(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINTEGER() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r2.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f2(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r3.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e5); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMAND_SYMBOL() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r4.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e6); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f4(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseBLANK() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c1;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }

    return s0;
  }

  function peg$parseTAB() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 9) {
      s0 = peg$c2;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }

    return s0;
  }

  function peg$parseFORM_FEED() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 12) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }

    return s0;
  }

  function peg$parseLINE_FEED() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 10) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }

    return s0;
  }

  function peg$parseCARRIAGE_RETURN() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 13) {
      s0 = peg$c5;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseWS() {
    var s0;

    s0 = peg$parseBLANK();
    if (s0 === peg$FAILED) {
      s0 = peg$parseFORM_FEED();
      if (s0 === peg$FAILED) {
        s0 = peg$parseTAB();
        if (s0 === peg$FAILED) {
          s0 = peg$parseCARRIAGE_RETURN();
        }
      }
    }

    return s0;
  }

  function peg$parseWHITESPACE() {
    var s0;

    s0 = peg$parseWS();
    if (s0 === peg$FAILED) {
      s0 = peg$parseLINE_FEED();
    }

    return s0;
  }

  function peg$parseHEADER() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 91) {
      s1 = peg$c6;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseWS();
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parseWS();
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSTRING();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 93) {
              s5 = peg$c7;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$parseWHITESPACE();
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$parseWHITESPACE();
              }
              peg$savedPos = s0;
              s0 = peg$f5(s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEADERS() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseHEADER();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseHEADER();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f6(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePIECE() {
    var s0;

    if (peg$r5.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }

    return s0;
  }

  function peg$parseRANK() {
    var s0;

    if (peg$r6.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parseFILE() {
    var s0;

    if (peg$r7.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }

    return s0;
  }

  function peg$parseCHECK() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c8;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }

    return s0;
  }

  function peg$parseMATE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 35) {
      s0 = peg$c9;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e18); }
    }

    return s0;
  }

  function peg$parseCAPTURE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 120) {
      s0 = peg$c10;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }

    return s0;
  }

  function peg$parsePERIOD() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 46) {
      s0 = peg$c11;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }

    return s0;
  }

  function peg$parseRESULT() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c12) {
      s0 = peg$c12;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c13) {
        s0 = peg$c13;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 42) {
          s0 = peg$c14;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e23); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c15) {
            s0 = peg$c15;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseMOVE_NUMBER() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseINTEGER();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePERIOD();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$currPos;
      s4 = peg$parsePERIOD();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsePERIOD();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f7(s1);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSQUARE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRANK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFILE();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f8(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePROMOTION() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 61) {
      s1 = peg$c16;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e25); }
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    if (peg$r8.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e26); }
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNAG() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s2 = peg$c17;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e27); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseINTEGER();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f9(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCONTINUATION() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePERIOD();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsePERIOD();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsePERIOD();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDISAMBIGUATION() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseRANK();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseFILE();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$parseRANK();
      if (s0 === peg$FAILED) {
        s0 = peg$parseFILE();
      }
    }

    return s0;
  }

  function peg$parseCOMMENT_MULTILINE_CHARS() {
    var s0;

    if (peg$r9.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e28); }
    }

    return s0;
  }

  function peg$parseCOMMENT_MULTILINE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseCOMMENT_MULTILINE_CHARS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseCOMMENT_MULTILINE_CHARS();
      }
      if (input.charCodeAt(peg$currPos) === 125) {
        s3 = peg$c19;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e30); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f10(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMENT_SINGLELINE_CHARS() {
    var s0;

    if (peg$r10.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }

    return s0;
  }

  function peg$parseCOMMENT_SINGLELINE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 59) {
      s1 = peg$c20;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e32); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseCOMMENT_SINGLELINE_CHARS();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseCOMMENT_SINGLELINE_CHARS();
      }
      peg$savedPos = s0;
      s0 = peg$f11(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMAND() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c21) {
      s1 = peg$c21;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e33); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSYMBOL();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWHITESPACE();
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s6 = peg$c20;
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
          if (s6 === peg$FAILED) {
            s6 = null;
          }
          s7 = peg$parseCOMMAND_SYMBOL();
          if (s7 !== peg$FAILED) {
            s6 = [s6, s7];
            s5 = s6;
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 59) {
              s6 = peg$c20;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = peg$parseCOMMAND_SYMBOL();
            if (s7 !== peg$FAILED) {
              s6 = [s6, s7];
              s5 = s6;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
          if (input.charCodeAt(peg$currPos) === 93) {
            s5 = peg$c7;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s5 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f12(s2, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMAND_MULTIPLE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseCOMMAND();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseCOMMAND();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMENT_COMMAND() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 123) {
      s1 = peg$c18;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e29); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCOMMAND_MULTIPLE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseBLANK();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = [];
        s5 = peg$parseCOMMENT_MULTILINE_CHARS();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseCOMMENT_MULTILINE_CHARS();
        }
        if (input.charCodeAt(peg$currPos) === 125) {
          s5 = peg$c19;
          peg$currPos++;
        } else {
          s5 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e30); }
        }
        if (s5 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCOMMENT() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseCOMMENT_COMMAND();
    if (s1 === peg$FAILED) {
      s1 = peg$parseCOMMENT_MULTILINE();
      if (s1 === peg$FAILED) {
        s1 = peg$parseCOMMENT_SINGLELINE();
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f15(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseCOMMENTS() {
    var s0, s1, s2, s3;

    s0 = [];
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parseWHITESPACE();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseWHITESPACE();
    }
    s3 = peg$parseCOMMENT();
    if (s3 !== peg$FAILED) {
      peg$savedPos = s1;
      s1 = peg$f16(s3);
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parseWHITESPACE();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseWHITESPACE();
        }
        s3 = peg$parseCOMMENT();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s1;
          s1 = peg$f16(s3);
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseRAV() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c22;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseWHITESPACE();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseWHITESPACE();
      }
      s3 = [];
      s4 = peg$parseCOMMENTS();
      while (s4 !== peg$FAILED) {
        s3.push(s4);
        s4 = peg$parseCOMMENTS();
      }
      s4 = [];
      s5 = peg$parseWHITESPACE();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseWHITESPACE();
      }
      s5 = peg$parseMOVETEXT();
      if (s5 !== peg$FAILED) {
        s6 = [];
        s7 = peg$parseWHITESPACE();
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parseWHITESPACE();
        }
        s7 = peg$parseRESULT();
        if (s7 === peg$FAILED) {
          s7 = null;
        }
        s8 = [];
        s9 = peg$parseWHITESPACE();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseWHITESPACE();
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s9 = peg$c23;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e35); }
        }
        if (s9 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f17(s3, s5, s7);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePAWN_HALF_MOVE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseRANK();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseCAPTURE();
      if (s3 !== peg$FAILED) {
        s2 = [s2, s3];
        s1 = s2;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseSQUARE();
    if (s2 !== peg$FAILED) {
      s3 = peg$parsePROMOTION();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePIECE_HALF_MOVE() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsePIECE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseCAPTURE();
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      s3 = peg$parseSQUARE();
      if (s3 !== peg$FAILED) {
        s1 = [s1, s2, s3];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePIECE_DISAMBIGUATION_HALF_MOVE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsePIECE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDISAMBIGUATION();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseCAPTURE();
        if (s3 === peg$FAILED) {
          s3 = null;
        }
        s4 = peg$parseSQUARE();
        if (s4 !== peg$FAILED) {
          s1 = [s1, s2, s3, s4];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseCASTLE_HALF_MOVE() {
    var s0;

    if (input.substr(peg$currPos, 5) === peg$c24) {
      s0 = peg$c24;
      peg$currPos += 5;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e36); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c25) {
        s0 = peg$c25;
        peg$currPos += 3;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e37); }
      }
    }

    return s0;
  }

  function peg$parseHALF_MOVE() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseCONTINUATION();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parsePAWN_HALF_MOVE();
    if (s3 === peg$FAILED) {
      s3 = peg$parsePIECE_HALF_MOVE();
      if (s3 === peg$FAILED) {
        s3 = peg$parsePIECE_DISAMBIGUATION_HALF_MOVE();
        if (s3 === peg$FAILED) {
          s3 = peg$parseCASTLE_HALF_MOVE();
        }
      }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parseCHECK();
      if (s4 === peg$FAILED) {
        s4 = peg$parseMATE();
      }
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseNAG();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s2 = [s2, s3, s4, s5];
      s1 = s2;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f18(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseMOVE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseMOVE_NUMBER();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseWHITESPACE();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parseWHITESPACE();
    }
    s3 = peg$parseHALF_MOVE();
    if (s3 !== peg$FAILED) {
      s4 = [];
      s5 = peg$currPos;
      s6 = [];
      s7 = peg$parseWHITESPACE();
      if (s7 !== peg$FAILED) {
        while (s7 !== peg$FAILED) {
          s6.push(s7);
          s7 = peg$parseWHITESPACE();
        }
      } else {
        s6 = peg$FAILED;
      }
      if (s6 !== peg$FAILED) {
        s7 = peg$parseNAG();
        if (s7 !== peg$FAILED) {
          peg$savedPos = s5;
          s5 = peg$f19(s1, s3, s7);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$currPos;
        s6 = [];
        s7 = peg$parseWHITESPACE();
        if (s7 !== peg$FAILED) {
          while (s7 !== peg$FAILED) {
            s6.push(s7);
            s7 = peg$parseWHITESPACE();
          }
        } else {
          s6 = peg$FAILED;
        }
        if (s6 !== peg$FAILED) {
          s7 = peg$parseNAG();
          if (s7 !== peg$FAILED) {
            peg$savedPos = s5;
            s5 = peg$f19(s1, s3, s7);
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      s5 = [];
      s6 = peg$currPos;
      s7 = [];
      s8 = peg$parseWHITESPACE();
      if (s8 !== peg$FAILED) {
        while (s8 !== peg$FAILED) {
          s7.push(s8);
          s8 = peg$parseWHITESPACE();
        }
      } else {
        s7 = peg$FAILED;
      }
      if (s7 !== peg$FAILED) {
        s8 = peg$parseCOMMENT();
        if (s8 !== peg$FAILED) {
          peg$savedPos = s6;
          s6 = peg$f20(s1, s3, s4, s8);
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      } else {
        peg$currPos = s6;
        s6 = peg$FAILED;
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        s7 = [];
        s8 = peg$parseWHITESPACE();
        if (s8 !== peg$FAILED) {
          while (s8 !== peg$FAILED) {
            s7.push(s8);
            s8 = peg$parseWHITESPACE();
          }
        } else {
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parseCOMMENT();
          if (s8 !== peg$FAILED) {
            peg$savedPos = s6;
            s6 = peg$f20(s1, s3, s4, s8);
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
      }
      s6 = [];
      s7 = peg$currPos;
      s8 = [];
      s9 = peg$parseWHITESPACE();
      while (s9 !== peg$FAILED) {
        s8.push(s9);
        s9 = peg$parseWHITESPACE();
      }
      s9 = peg$parseRAV();
      if (s9 !== peg$FAILED) {
        peg$savedPos = s7;
        s7 = peg$f21(s1, s3, s4, s5, s9);
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
      while (s7 !== peg$FAILED) {
        s6.push(s7);
        s7 = peg$currPos;
        s8 = [];
        s9 = peg$parseWHITESPACE();
        while (s9 !== peg$FAILED) {
          s8.push(s9);
          s9 = peg$parseWHITESPACE();
        }
        s9 = peg$parseRAV();
        if (s9 !== peg$FAILED) {
          peg$savedPos = s7;
          s7 = peg$f21(s1, s3, s4, s5, s9);
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f22(s1, s3, s4, s5, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseMOVETEXT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseMOVE();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = [];
      s5 = peg$parseWHITESPACE();
      while (s5 !== peg$FAILED) {
        s4.push(s5);
        s5 = peg$parseWHITESPACE();
      }
      s5 = peg$parseMOVE();
      if (s5 !== peg$FAILED) {
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseWHITESPACE();
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$parseWHITESPACE();
        }
        s5 = peg$parseMOVE();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f23(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseGAME() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseWHITESPACE();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$parseWHITESPACE();
    }
    s2 = peg$parseCOMMENTS();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = [];
    s4 = peg$parseWHITESPACE();
    while (s4 !== peg$FAILED) {
      s3.push(s4);
      s4 = peg$parseWHITESPACE();
    }
    s4 = peg$parseHEADERS();
    if (s4 === peg$FAILED) {
      s4 = null;
    }
    s5 = peg$parseCOMMENTS();
    if (s5 === peg$FAILED) {
      s5 = null;
    }
    s6 = [];
    s7 = peg$parseWHITESPACE();
    while (s7 !== peg$FAILED) {
      s6.push(s7);
      s7 = peg$parseWHITESPACE();
    }
    s7 = peg$currPos;
    s8 = peg$parseMOVETEXT();
    if (s8 !== peg$FAILED) {
      s9 = [];
      s10 = peg$parseWHITESPACE();
      if (s10 !== peg$FAILED) {
        while (s10 !== peg$FAILED) {
          s9.push(s10);
          s10 = peg$parseWHITESPACE();
        }
      } else {
        s9 = peg$FAILED;
      }
      if (s9 !== peg$FAILED) {
        s10 = peg$parseRESULT();
        if (s10 !== peg$FAILED) {
          peg$savedPos = s7;
          s7 = peg$f24(s2, s4, s5, s8, s10);
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
      } else {
        peg$currPos = s7;
        s7 = peg$FAILED;
      }
    } else {
      peg$currPos = s7;
      s7 = peg$FAILED;
    }
    if (s7 === peg$FAILED) {
      s7 = peg$currPos;
      s8 = peg$parseRESULT();
      if (s8 !== peg$FAILED) {
        peg$savedPos = s7;
        s8 = peg$f25(s2, s4, s5, s8);
      }
      s7 = s8;
    }
    if (s7 !== peg$FAILED) {
      s8 = [];
      s9 = peg$parseWHITESPACE();
      while (s9 !== peg$FAILED) {
        s8.push(s9);
        s9 = peg$parseWHITESPACE();
      }
      peg$savedPos = s0;
      s0 = peg$f26(s2, s4, s5, s7);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }


  function flatten(array, accumulator = []) {
    for(var i = 0; i < array.length; i++) {
      if(Array.isArray(array[i])) {
        flatten(array[i], accumulator);
      } else {
        accumulator.push(array[i]);
      }
    }
    return accumulator;
  }

  function toMove(data) {
    const move = {};
    if(data.move_number) { move.moveNumber = data.move_number }
    if(data.half_move) { move.move = data.half_move }
    if(data.nags && data.nags.length) { move.nags = data.nags }
    if(data.ravs && data.ravs.length) { move.ravs = data.ravs }
    if(data.comments) { move.comments = data.comments }

    return move;
  }

  function toGame(data) {
    const game = {};
    return {
      introComments: data.intro_comments,
      headers: data.headers,
      comments: data.comments,
      moves: data.moves,
      result: data.result
    }
  }
  function toCommandArguments(args) {
    return args.map(function(arg) {
      if(arg[0] === ';' || arg[0] === null) {
        return arg.slice(1);
      } else {
        return arg;
      }
    }).flat()
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

export {
  peg$SyntaxError as SyntaxError,

  peg$parse as parse
};
